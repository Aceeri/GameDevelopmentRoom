package com.nathancolgate.s3_swf_upload{		import com.elctech.S3UploadOptions;	import com.nathancolgate.s3_swf_upload.*;	import fastswf.FastSwfManager;	import flash.external.ExternalInterface;	import com.adobe.net.MimeTypeMap;	import flash.geom.Rectangle;	import flash.utils.ByteArray;	import flash.utils.CompressionAlgorithm;	import flash.utils.Endian;	import org.flashdevelop.utils.FlashConnect;		import flash.net.*	import flash.events.*		public class S3Signature	{				private var upload_options:S3UploadOptions;		private var request:URLRequest;		private var _file:FileReference;				//Parsing vars		private var xByte:uint;		private var xNBits:int;		private var xOffset:int;		//private var _prefixPath:String				public var s3upload:S3Upload;				public function S3Signature(file:FileReference, signatureUrl:String, prefixPath:String)		{			_file = file;			_file.addEventListener(Event.COMPLETE, fileLoaded);						// Create options list for file s3 upload metadata 			upload_options = new S3UploadOptions;			upload_options.FileSize = _file.size.toString();			upload_options.FileName = getFileName(_file);			upload_options.ContentType = getContentType(upload_options.FileName);			upload_options.key = prefixPath + upload_options.FileName;						request = new URLRequest(signatureUrl);						_file.load();//			_prefixPath                     = prefixPath				}				//resource: https://bugzilla.mozilla.org/show_bug.cgi?id=775743		private function fileLoaded(e:Event):void		{						// Parse SWF			_file.removeEventListener(Event.COMPLETE, fileLoaded);			var width:uint, height:uint;			var ba:ByteArray = _file.data;			//FlashConnect.trace(ba.length);			ba.endian = Endian.LITTLE_ENDIAN;			var format:String = ba.readUTFBytes(3);			ba.readByte(); ba.readUnsignedInt();						//FlashConnect.trace(ba.length);			//FlashConnect.trace(format);			if (format == "CWS")			{				ba.readBytes(ba);				ba.length -= 8;				ba.uncompress();			}			else if(format == "FWS") {ba.readBytes(ba);				ba.length -= 8;}			else if (format == "ZWS")			{				var udata:ByteArray = new ByteArray();				udata.endian = Endian.LITTLE_ENDIAN;				var ptr:int = 0;				for (ptr = 0; ptr < 5; ptr++) // put lzma properties in 0-4					udata[ptr] = ba[12 + ptr];				// calculate uncompressed length, subtract 8 (swf header)				var scriptlen:uint=ba[4]+(ba[5]<<8)+(ba[6]<<16)+(ba[7]<<24)-8;				// write lzma properties bytes: 0-4				for (ptr=0;ptr<4;ptr++) {					udata[5+ptr]=ba[8+ptr]				}				// write the uncompressed length: 5-8				udata[5]=scriptlen&0xFF;				udata[6]=(scriptlen>>8) & 0xFF;				udata[7]=(scriptlen>>16) & 0xFF;				udata[8]=(scriptlen>>24) & 0xFF;				// add 4 extra 0 to compressed length: 9-12				for (ptr=0;ptr<4;ptr++) {					udata[9+ptr]=0				}				ba.position = 17;				ba.readBytes(udata, 13, ba.length - ba.position);								udata.uncompress(CompressionAlgorithm.LZMA);				//now we need to use udata, and set ba's header to udata				FlashConnect.trace("Length Compare: " + udata.length + " - compare - " + ba.length);				ba = udata;			}			ba.position = 0;			var rect:Rectangle = new Rectangle();			rect.left = xfReadNBits(ba, true) / 20;			rect.right = xfReadNBits(ba) / 20;			rect.top = xfReadNBits(ba) / 20;			rect.bottom = xfReadNBits(ba) / 20;			FlashConnect.trace("Rectangle that is parsed: " + rect.x + ", " + rect.y + " width: " + rect.width + "   height: " + rect.height);						var variables:URLVariables = new URLVariables();			variables.key = upload_options.key			variables.content_type = upload_options.ContentType;			variables.height = int(rect.height);			variables.width = int(rect.width);			variables.access_level = "undefined";			variables.type = "swf";			request.method = URLRequestMethod.POST;			request.data = variables;						var signature:URLLoader = new URLLoader();			signature.dataFormat = URLLoaderDataFormat.TEXT;			signature.addEventListener(Event.OPEN, openHandler);			signature.addEventListener(ProgressEvent.PROGRESS, progressHandler);			signature.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);			signature.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);			signature.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			signature.addEventListener(Event.COMPLETE, completeHandler);			signature.load(request);			FastSwfManager.progressBar.enabled = true;		}				private function xfReadNBits(v:ByteArray, vStart:Boolean = false):uint		{			var n:uint;						if (vStart)			{				xByte = v.readUnsignedByte();				xNBits = xByte >> 3;				xOffset = 3;			}						n = xByte << (32 - xOffset) >> (32 - xNBits);			xOffset -= xNBits;			while (xOffset < 0)			{				xByte = v.readUnsignedByte();				n |= (xOffset < -8) ? (xByte << (-xOffset - 8)) : (xByte >> (-xOffset - 8));				xOffset += 8;			}			return n;		}				private function openHandler(event:Event):void		{			//ExternalInterface.call(S3Uploader.s3_swf_obj + '.onSignatureOpen', toJavascript(_file), event);		}				private function progressHandler(progress_event:ProgressEvent):void		{			FlashConnect.trace("progressHandler()");			//ExternalInterface.call(S3Uploader.s3_swf_obj + '.onSignatureProgress', toJavascript(_file), progress_event);			FastSwfManager.progressBar.setProgress(progress_event.bytesLoaded, progress_event.bytesTotal);		}				private function securityErrorHandler(security_error_event:SecurityErrorEvent):void		{			FlashConnect.trace("securityErrorHandler()" + security_error_event.toString());			//ExternalInterface.call(S3Uploader.s3_swf_obj + '.onSignatureSecurityError', toJavascript(_file), security_error_event);		}				private function httpStatusHandler(http_status_event:HTTPStatusEvent):void		{			FlashConnect.trace("httpStatusHandler()" + http_status_event.toString());			//ExternalInterface.call(S3Uploader.s3_swf_obj + '.onSignatureHttpStatus', toJavascript(_file), http_status_event);		}				private function ioErrorHandler(io_error_event:IOErrorEvent):void		{			FlashConnect.trace("ioErrorHandler()");			//ExternalInterface.call(S3Uploader.s3_swf_obj + '.onSignatureIOError', toJavascript(_file), io_error_event);		}				private function completeHandler(event:Event):void		{			FlashConnect.trace("completeHandler()");			//ExternalInterface.call(S3Uploader.s3_swf_obj + '.onSignatureComplete', toJavascript(_file), event);			var loader:URLLoader = URLLoader(event.target);			var xml:XML = new XML(loader.data);						// create the s3 options object			upload_options.policy = xml.policy;			upload_options.signature = xml.signature;			upload_options.bucket = xml.bucket;			upload_options.AWSAccessKeyId = xml.accesskeyid;			upload_options.acl = xml.acl;			upload_options.Expires = xml.expirationdate;			upload_options.Secure = xml.https;			upload_options.ContentDisposition = xml.contentdisposition;			upload_options.CacheControl = xml.cachecontrol;			upload_options.newKey = xml.newKey; //NOTE that we stop caring about the specified prefix if we have a newkey.						if (xml.errorMessage != "")			{				//ExternalInterface.call(S3Uploader.s3_swf_obj + '.onSignatureXMLError', toJavascript(_file), xml.errorMessage);				return;			}						s3upload = new S3Upload(upload_options);		}				/* MISC */				private function getContentType(fileName:String):String		{			var fileNameArray:Array = fileName.split(/\./);			var fileExtension:String = fileNameArray[fileNameArray.length - 1];			var mimeMap:MimeTypeMap = new MimeTypeMap;			var contentType:String = mimeMap.getMimeType(fileExtension);			return contentType;		}				private function getFileName(file:FileReference):String		{			var fileName:String = file.name.replace(/^.*(\\|\/)/gi, '').replace(/[^A-Za-z0-9\.\-]/gi, '_');			return fileName;		}				// Turns a FileReference into an Object so that ExternalInterface doesn't choke		private function toJavascript(file:FileReference):Object		{			var javascriptable_file:Object = new Object();			javascriptable_file.name = file.name;			javascriptable_file.size = file.size;			javascriptable_file.type = file.type;			return javascriptable_file;		}		}}